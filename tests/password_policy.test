<?php
/**
 * Unit tests for Password policy module.
 */
class PasswordPolicyTest extends DrupalTestCase {
  function get_info() {
    return array(
      'name'  => 'Constraints Test',
      'desc'  => t('Assure that password constraints work.'),
      'group' => 'Password Policy Tests',
    );
  }

  function setUp() {
    parent::setUp();

    $this->drupalModuleEnable('password_policy');
  }

  function testUppercaseConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = 'Abc';
    $result = password_policy_constraint_uppercase_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'One uppercase letter in the uppercase constraint with param 2');
    $pass = 'ABc';
    $result = password_policy_constraint_uppercase_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Two uppercase letters in the uppercase constraint with param 2');
    $pass = 'ABC';
    $result = password_policy_constraint_uppercase_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Three uppercase letters in the uppercase constraint with param 2');
  }
  
  function testLowercaseConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = 'Abc';
    $result = password_policy_constraint_lowercase_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'One uppercase letter in the lowercase constraint with param 2');
    $pass = 'ABc';
    $result = password_policy_constraint_lowercase_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'Two uppercase letters in the lowercase constraint with param 2');
    $pass = 'ABC';
    $result = password_policy_constraint_lowercase_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'Three uppercase letters in the lowercase constraint with param 2');
  }

  function testLetterConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = 'a12';
    $result = password_policy_constraint_letter_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'One lowercase letter in the letter constraint with param 2');
    $pass = 'aB1';
    $result = password_policy_constraint_letter_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'One lowercase and one uppercase letter in the letter constraint with param 2');
    $pass = 'abC';
    $result = password_policy_constraint_letter_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Two lowercase and one uppercase letter in the letter constraint with param 2');
  }

  function testDigitConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = '1ab';
    $result = password_policy_constraint_digit_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'One digit in the digit constraint with param 2');
    $pass = '12a';
    $result = password_policy_constraint_digit_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Two digits in the digit constraint with param 2');
    $pass = '123';
    $result = password_policy_constraint_digit_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Three digits in the digit constraint with param 2');
  }

  function testLengthConstraint() {
    $constraint = 6;
    $uid = 0;
    $pass = 'abcde';
    $result = password_policy_constraint_length_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'Five characters password in the length constrain with param 6');
    $pass = 'abcdef';
    $result = password_policy_constraint_length_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Six characters password in the length constrain with param 6');
    $pass = 'abcdefg';
    $result = password_policy_constraint_length_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Seven characters password in the length constrain with param 6');
  }

  function testAlphanumericConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = '1$%';
    $result = password_policy_constraint_alphanumeric_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'One digit and no letter in the alphanumeric constraint with param 2');
    $pass = '1a#';
    $result = password_policy_constraint_alphanumeric_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'One digit and one letter in the alphanumeric constraint with param 2');
    $pass = '1ab';
    $result = password_policy_constraint_alphanumeric_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'One digit ant two letters in the alphanumeric constraint with param 2');
  }

  function testPunctuationConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = '%1a';
    $result = password_policy_constraint_punctuation_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'One punctuation character in the punctuation constraint with param 2');
    $pass = '%^a';
    $result = password_policy_constraint_punctuation_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Two punctuation character in the punctuation constraint with param 2');
    $pass = '%^&';
    $result = password_policy_constraint_punctuation_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Three punctuation character in the punctuation constraint with param 2');
  }

  function testTypeConstraint() {
    $constraint = 2;
    $uid = 0;
    $pass = 'abc';
    $result = password_policy_constraint_type_validate($pass, $constraint, $uid);
    $this->assertFalse($result, 'Thre letters in the type constraint with param 2');
    $pass = 'a1c';
    $result = password_policy_constraint_type_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'Two letters and one digit in the type constraint with param 2');
    $pass = 'a1&';
    $result = password_policy_constraint_type_validate($pass, $constraint, $uid);
    $this->assertTrue($result, 'One letter, one digit and one punctuation in the type constraint with param 2');
  }

  function testUsernameConstraint() {
    $user = $this->drupalCreateUserRolePerm();
    $name = $this->randomName();
    $result = password_policy_constraint_username_validate($name, '', $user->uid);
    $this->assertTrue($result, 'Random string in the username constraint');
    $result = password_policy_constraint_username_validate($user->name, '', $user->uid);
    $this->assertFalse($result, 'Username in the username constraint');
  }

  function testHistoryConstraint() {
    // Log in
    $user = $this->drupalCreateUserRolePerm(array('administer password policies'));
    $this->drupalLoginUser($user);
    // Create a policy
    $policy_name = $this->randomName();
    $edit = array(
      'name' => $policy_name,
      'constraint_history' => '2',
    );
    $this->drupalPost('admin/settings/password_policy/add', $edit, t('Create'));
    $this->assertText('Policy '. $policy_name .' has been created.', 'Policy '. $policy_name .' has been created');
    // Saving default policy
    $source = $this->drupalGet('admin/settings/password_policy/list');
    $source = str_replace("\n", '', $source);
    $default = preg_replace('/(.*)value="(\d+)"  checked="checked"(.*)/', '$2', $source);
    $default = ctype_digit($default) ? $default : '';
    // Finding the policy's pid
    $pid = preg_replace('/(.*)'. $policy_name .'[^\d]+(\d+)"(.*)/', '$2', $source);
    // Setting default policy
    $edit = array(
      'default' => $pid,
    );
    $this->drupalPost('admin/settings/password_policy/list', $edit, t('Set default policy'));
    $this->assertText($policy_name .' has been set as the default password policy.', $policy_name .' has been set as the default password policy');
    // Change password
    $pass1 = "aaaaaa";
    $edit = array(
      'pass[pass1]' => $pass1,
      'pass[pass2]' => $pass1,
    );
    $this->drupalPost('user/'. $user->uid .'/edit',  $edit, t('Save'));
    $this->assertText('The changes have been saved.', 'The password has been changed');
    // Change password second time
    $pass2 = "bbbbbb";
    $edit = array(
      'pass[pass1]' => $pass2,
      'pass[pass2]' => $pass2,
    );
    $this->drupalPost('user/'. $user->uid .'/edit',  $edit, t('Save'));
    $this->assertText('The changes have been saved.', 'The password has been changed');
    // Try changing password with the first one
    $edit = array(
      'pass[pass1]' => $pass1,
      'pass[pass2]' => $pass1,
    );
    $this->drupalPost('user/'. $user->uid .'/edit',  $edit, t('Save'));
    $this->assertText('Password must not match 2 last passwords.', 'The password has not been changed');
    // Change password again
    $pass3 = "cccccc";
    $edit = array(
      'pass[pass1]' => $pass3,
      'pass[pass2]' => $pass3,
    );
    $this->drupalPost('user/'. $user->uid .'/edit',  $edit, t('Save'));
    $this->assertText('The changes have been saved.', 'The password has been changed');
    // Setting back default policy
    if ($default) {
      $edit = array(
        'default' => $default,
      );
      $this->drupalPost('admin/settings/password_policy/list', $edit, t('Set default policy'));
      $this->assertText(' has been set as the default password policy.', 'Default password policy was restored');
    }
    // Delete test policy
    $this->drupalPost('admin/settings/password_policy/'. $pid .'/delete', array(), t('Delete'));
    $this->assertText('Password policy '. $policy_name .' was deleted.', 'Default password policy '. $policy_name .'was deleted');
  }
}

